SO2SDR User Manual
==================
:author: Nate Bargmann, N0NB & Torsten Clay, N4OGW
:Author Initials: NB
:email:  so2sdr@googlegroups.com
:revnumber: 1.2.2git
:revdate: 22 June 2012
:toc:
:website: http://code.google.com/p/so2sdr/

A user reference manual for the 'SO2SDR' contest logging program by Torsten
Clay, N4OGW, <so2sdr@gmail.com>.

Primary author of this manual is Nate Bargmann, N0NB <n0nb@n0nb.us> including
portions from the SO2SDR help file by Torsten Clay, N4OGW 
<so2sdr@googlegroups.com>.

<<<
:numbered:
Introduction
------------

'SO2SDR' is a logging database and radio control application for amateur radio
operators involved in amateur radio contesting, a.k.a.
http://en.wikipedia.org/wiki/Radiosport[Radiosport].   SO2SDR is written in
http://www.cplusplus.com/[C++] using the http://qt.nokia.com/[Qt] library.
Using the Qt library eases cross-platform development.  As a result SO2SDR is
available for both Unix (various Linux distributions tested) and Microsoft
Windows platforms.

Like other such contest loggers, SO2SDR provides real time duping (checking for
stations already ``worked'' in the contest per various contest rules) and
scoring for a variety of contests with more being added.  SO2SDR is of special
interest to amateur radio operators interested in participating in the ``Single
Operator 2 Radio'' category of many contests.  Special features are provided to
support two radio operation.  To view activity on the bands in real time,
SO2SDR can display the output of a ``Software Defined Radio'' receiver onscreen
with suitable RF hardware and soundcard support.

Conventions
~~~~~~~~~~~

Conventions used in this manual.

- Important terms and proper names are 'emphasized' the first time they are
  introduced.
- Amateur radio jargon and other such terms are ``double quoted'' the first
  time they are introduced.
- Typed commands and screen output are +mono-spaced+.
- Named keys are enclosed in angle brackets, e.g. <Enter>.
- Key combinations have individual key names separated by a hyphen, e.g. <Alt>-H.
- Character keys stand for themselves, e.g. H.

Every effort is made to keep this manual up to date with SO2SDR development.
As SO2SDR is receiving near constant development, some things may be changed
in development versions before this manual is updated.  Anyone interested in
following ongoing development should consult the <<X4,Project resources>>.

[[X4]]
Project resources
~~~~~~~~~~~~~~~~~

Released files for the SO2SDR project are hosted at:
http://code.google.com/p/so2sdr/[http://code.google.com/p/so2sdr/]

The development and user mailing list is at:
http://groups.google.com/group/so2sdr[http://groups.google.com/group/so2sdr]

A development Git repository is at:
https://github.com/n4ogw/so2sdr[https://github.com/n4ogw/so2sdr]

<<<
Installation
------------

At present 'SO2SDR' is distributed in a source code archive and a binary .msi
archive for 'Microsoft Windows'.

Binary installation on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Download the latest SO2SDR +.msi+ file from the
http://code.google.com/p/so2sdr/downloads/list[SO2SDR project download page]
and install it in the usual way.

Linux source release build and installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will need development versions of the following libraries installed: Qt4,
FFTW3, Hamlib 1.2.'x', and PortAudio 19.

[NOTE]
Some distributions have separate binary and development packages often
having the binary package name suffixed with +dev+.  Others include
everything in one package.  Check your distribution's documentation.

1. Download the http://code.google.com/p/so2sdr/downloads/list[latest source
release tarball].

2. Unpack source: +tar xzvof so2sdr-x.x.x.tgz+

3. By default, +so2sdr+ will be installed in +/usr/local/bin+, and associated
data files will be placed in +/usr/local/share/so2sdr+. Desktop support files
will be placed under the +/usr/local/share+ hierarchy.  If you want to change
the location of the program, edit the +SO2SDR_INSTALL_DIR+ variable assignment
in +common.pri+.

4. +qmake+

5. +make+

6. (As superuser) +make install+

Building under Windows/Visual Studio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will need Qt4, FFTW, and PortAudio libraries

1. Unpack source (need a Windows +tar+ equivalent)

2. Edit +so2sdr/so2sdr.pro+, select ``vcapp'' rather than ``app'' for +TEMPLATE+

3. You may also want to adjust the directory for portaudio in the +.pro+ file

4. Open Qt command window. In top-level directory for so2sdr do: +qmake -tp vc -r+

5. Now there should be +.sln+ solution file for Windows

Git development repository
~~~~~~~~~~~~~~~~~~~~~~~~~~

A ``read-only'' clone of the Git development repository may be made by:

+git clone git://github.com/n4ogw/so2sdr.git+

Once the clone is complete, SO2SDR may be built following the source release 
steps above for your platform.

To contribute to SO2SDR's development, the easiest way is to create a Git Hub
account, from the Git Hub Web interface create a ``fork'' of the SO2SDR Git
tree, and then create a ``read-write'' clone of Tor's tree (full documentation
is on the Git Hub site).  You will be able to ``push'' your changes to your
fork and create a ``pull request'' that Tor can consider for inclusion into
SO2SDR.

<<<
Hardware interfacing
--------------------

SO2SDR will become more useful as station equipment is connected to the
computer allowing for control of transceiver frequency and mode, transceiver
selection (when multiple radios are in use), SDR receiver(s) for bandscope(s),
and Morse Code keyer (CW).

TODO:  Complete this section with examples.

<<<
Getting started
---------------

Now that SO2SDR is installed, you should find it in your desktop menu (on
Linux).

[TIP]
An extra menu package may need to be installed on Linux systems to have the
`Hamradio' menu appear.  On Debian and Ubuntu derived systems this package is
named +extra-xdg-menus+.

[NOTE]
The KDE desktop may require running +kbuildsycoca4+ to have SO2SDR show in its
menus.  This can be done from the Run Command box or a Konsole terminal
session.  It seemed that I had to log out and back in to have the menu rebuilt.

Create user data directory
~~~~~~~~~~~~~~~~~~~~~~~~~~

The first time SO2SDR is run no station data will be set and an ``error'' box
will appear.  Of course you'll want to create for persistent data storage so
click `Yes'.

.SO2SDR create user data directory
image::images/so2sdr_user_data.png[caption="",link="images/so2sdr_user_data.png"]

Opening screen
~~~~~~~~~~~~~~

The main SO2SDR window will appear. In this case the parallel port device is
not available and an information box appears.  Select whether you want to be
reminded of this message again during this run of SO2SDR and click `OK'.

.SO2SDR opening screen
image::images/so2sdr_open.png[caption="",link="images/so2sdr_open.png"]

[[X3]]
[NOTE]
===============================================================================
On Linux this message likely appears because either your computer has no
parallel port, or your username is not a member of the +lp+ group.

Use the command: +ls -l /dev/parport0+ to check.  If it is available you'll
likely see output like:

+crw-rw---T 1 root lp 99, 0 Jun 10 20:37 /dev/parport0+

To access the port, you must be a member of the +lp+ group.  You can do this
with the +usermod+ command:

+sudo usermod -G lp -a username+

After issuing this command, you will need to logout and log back into your
account for the group membership to take effect.
===============================================================================

Main Window
~~~~~~~~~~~

The SO2SDR main window is where the majority of the program's interaction takes place.

.SO2SDR main window
image::images/so2sdr_main.png[caption="",link="images/so2sdr_main.png"]

- The Mults box shows worked multipliers (depending on the contest event).  

- The Calls box shows the possible callsign based on the character pattern
(sourced from +MASTER.DTA+, +MASTERDX.DTA+, and +MASUSVE.DTA+ in
$$SO2SDR_INSTALL_DIR/share/so2sdr (default /usr/local/share/so2sdr on Linux)

- Summary shows the number of contacts per band for this event.

- The unlabeled box to the right of the summary will show the previous logged
entries.

- The frequencies, mode, Morse sending speed, and entry boxes for each radio
occupy the lower portion of the main window.  Radio 1 to the left and Radio 2
to the right.

- The lowest line shows the current date and time followed by the QSO (contact)
rate.

- The status area of the main window shows each radio and Winkeyer status.

Station data
~~~~~~~~~~~~

From the menu in the main window, select Config|Station and then fill in your
station data.

.SO2SDR station data
image::images/so2sdr_station_data.png[caption="",link="images/so2sdr_station_data.png"]

Radio and ports
~~~~~~~~~~~~~~~

From the menu in the main window, select Config|Radios/Ports and then select
your radio model(s) and parallel port for radio switching.

.SO2SDR radio and ports setup
image::images/so2sdr_radio_ports.png[caption="",link="images/so2sdr_radio_ports.png"]

[NOTE]
===============================================================================
The serial port parameters are text entry boxes.  On Linux give the complete
path to the serial device.  In the example is +/dev/rig+ which is a symbolic
link to the real USB port device (see the <<X1,Simple udev Rules appendix>>).
Built in serial devices are consistently named starting with +/dev/ttyS0+
(corresponding to COM1 on MS Windows) and advancing upward.

On MS Windows use the +COM1+ through +COM+'x' port names.
===============================================================================

[NOTE]
On Linux systems, as with the parallel port, your username must be a member of
the same group as the device in order to access it, see the <<X3,Note on
parallel ports>>.  On Debian and derivatives, your username will need to be a
member of the +dialout+ group.

Winkey (K1EL) Morse keyer
~~~~~~~~~~~~~~~~~~~~~~~~~

From the menu in the main window, select Config|Winkey and configure the K1EL
(or compatible, such as the Ham Gadgets Master Keyer 1) keying device.  No
other keying method (cwdaemon, direct port keying, etc.) is supported.

.SO2SDR winkey
image::images/so2sdr_winkey.png[caption="",link="images/so2sdr_winkey.png"]

[NOTE]
===============================================================================
The serial port parameter is a text entry box.  On Linux give the complete
path to the serial device.  In the example is +/dev/mk1+ which is a symbolic
link to the real USB port device (see the <<X1,Simple udev Rules appendix>>).
Built in serial devices are consistently named starting with +/dev/ttyS0+
(corresponding to COM1 on MS Windows) and advancing upward.

On MS Windows use the +COM1+ through +COM+'x' port names.
===============================================================================

[NOTE]
On Linux systems, as with the parallel port, your username must be a member of
the same group as the device in order to access it, see the <<X3,Note on
parallel ports>>.  On Debian and derivatives, your username will need to be a
member of the +dialout+ group.


Bandscope
~~~~~~~~~

From the menu in the main window, select Config|Bandscope and enable the desired
bandscope and configure the sound hardware.

.SO2SDR bandscope
image::images/so2sdr_bandscope.png[caption="",link="images/so2sdr_bandscope.png"]

<<<
Operation
---------

SO2SDR is a 'modal' logging program.  This means the program will execute
different actions depending upon the state of the 'Call' and 'Exchange' fields
and which mode is currently active.  The modes are 'Running' (CQ) and 'Search
and Pounce' (S&P).  In each mode special keys such as <Enter> and Function
keys, with <Shift>, <Alt>, and <Ctrl> modifiers, will have different actions
associated with them.

While this chapter aims to be a descriptive as possible, there is no substitute
for practicing and using the program, particularly if you have experience with
other loggers.  Operators familiar with 'TRlog' or 'N1MM' will likely find
SO2SDR easy to use with a few variations.  Operators familiar with 'CT' will
have a longer learning curve!

Running stations
~~~~~~~~~~~~~~~~

SO2SDR uses the ``Enter Sends Message'' approach used by many other logging
programs.

1. Enter the callsign and press <Enter.>
a. The other station's callsign and your exchange are sent (CW).
b. The Exchange box appears and the cursor is placed into the Exchange box.
2. Enter the other station's exchange information and press <Enter>.
a. The QSL message is sent (CW) after the exchange is validated to the rules of the
   contest.
b. The QSO is logged to the database.
c. The Call and Exchange boxes are cleared of text.
d. The Exchange box disappears.
e. The cursor is placed into the Call field for the next QSO.
3. Repeat.

The program tries to be intelligent in interpreting the entered exchange. There
needs to be a space between exchange elements in most cases (123a is acceptable
in Sweepstakes for the number/prec). In most cases, you do not need to
backspace to correct an exchange mistake--the program will take the last valid
exchange on the line.

The exchange must be ``validated'', or <Enter> will not log the qso. In case
there is a problem, it is possible to "force log" the qso- press <Ctrl>-<Enter>
instead of just <Enter>. Be careful with these cases, the number and position of
exchange elements has to match exactly in this case. These qso's may also be
scored incorrectly

Shift-Enter instead of Enter will also log the qso without sending any CW.

The Backslash key (``\'') will log the qso and send the ``Quick QSL'' message
instead of the usual QSL message.

S&P
~~~

TAB enters S&P mode.

1. Type callsign. When <Enter> is pressed, your call is sent.
2. Enter exchange. When <Enter> is pressed, your exchange is sent.
3. press <Enter> again to log the qso.

Using the bandmap
~~~~~~~~~~~~~~~~~

In the bandmap, the radio frequency is in the center at the red line. A right
mouse click will bring up several options:

- *Zoom X1, Zoom X2*: Set scale of bandmap.
- *Delete call*: Use to remove a call from the bandmap. Note that the +-+ and
  +=+ keys can be used to remove a call.
- *IQ Balance*: Open the IQ balance dialog. The bandmap uses strong signals to
  correct gain and phase errors in the SDR hardware. This correction will be
saved when quitting the program. If the ``IQ'' box is checked, the correction is
applied; if the ``IQ Data'' box is checked, new signals are used to improve the
correction.

Options at the bottom of the bandmap window:

- *Mark signals*: This uses a peak detection algorithm to try to determine where
  signals are on the band. This does not decode any CW. Each detected peak is
marked with a small black dot; clicking on it will tune the radio to that
signal. <Ctrl>-<Up> and <Ctrl>-<Down> arrows can be used to tune the radio to
the next signal up or down the band. In S&P mode, they will tune the active
radio; otherwise they apply to the inactive radio.
- *Signal level slider*: Adjusts sensitivity of peak detection algorithm.
- *IQ*: Correct I-Q balance errors.
- *IQ Data*: Collect data from received signals to improve I-Q balance.
- *Click filter*: Removes key clicks. Not very effective at the moment.

*Left click*: This will tune the radio to this frequency.

*Left Click+drag in frequency scale*: Moves center of the display.

When in S&P mode, pressing <Space> after typing a callsign will add it to the
bandmap. If the call is a dupe, it will be highlighted in color on the bandmap.
Using this trick, new signals become obvious on the bandmap. It is of course
possible that a station can be replaced by another on exactly the same
frequency. However, in practice this does not happen very often--it is a much
more probable that unhighlighted signals are unworked stations. The Spot
Timeout setting is also critical here.

Editing log information
~~~~~~~~~~~~~~~~~~~~~~~

Previous QSO's can be edited in the log window by clicking on a field, editing
the information, and pressing <Enter>. Pressing <Escape> instead cancels the
changes. The following fields are editable: 'time', 'callsign', 'sent
exchange', and 'received exchange'. The qso points (if displayed for that
contest) will be recalculated automatically.

To search for a call (or partial call) in the log, enter a call fragment in the
callsign window and press <Ctrl>-F. <Escape> clears the search results.

*Marking qso's as invalid*: There is no way to delete QSO's from the log.
However, for each QSO there is a checkbox. If this is unchecked, the QSO is
marked as invalid and completely removed from dupe checking and scoring, and
will not appear in the final Cabrillo output.

SO2R
~~~~

For working stations on a second band while CQing on a different band SO2SDR
uses a system similar to TRLOG:

1. Tune in a station on the second radio. By clicking on a signal or using
   <Ctrl>-<Up>/<Down> this is very easy to do.
2. Press <Alt>-D; enter the callsign--it will show in the 2^nd^ radio callsign
   window. The color is changed to indicate this will be a second radio qso.
3. When ready to call the station, hit <Space>. Now work the station as usual.
   You may want to define function keys to send messages on the other radio
   during the 2^nd^ radio qso.
4. The program will return to the original radio when the 2^nd^ radio qso is
   logged.

Note that if you tune by a station you are sure you have worked, you can use
the ``-'' or ``='' keys to mark that frequency as a dupe without having to enter
the whole callsign. This can save a lot of typing and allow one to check a 2^nd^
band for new stations very quickly.

Sprint/Sprint+SO2R
~~~~~~~~~~~~~~~~~~

For users of TRLOG the behavior of SO2SDR is very similar.

<<<
Key reference
-------------

A summary of keystroke functions in SO2SDR.

Operating keystrokes
~~~~~~~~~~~~~~~~~~~~

- *<Escape>*: Cancel CW sending (does not clear fields when CW is in progress).
 * Clear logging fields (when not sending CW).
 * Exit S&P mode.
 * Reset <Alt>-D status.
- *<Enter>*: In an empty Call field sends CQ.
 * CQ mode.
 ** Enters other station's call and sends other station's call and your exchange (CW).
 ** Accepts other station's exchange and logs the QSO and sends the QSL message (CW).
 * S&P mode.
 ** Enters the other station's call and sends your call (CW).
 ** Accepts other station's exchange and sends your exchange (CW).
 ** Logs QSO (may become optional).
- *<Shift>-<Enter>*: Logs qso without sending CW.
- *<Ctrl>-<Enter>*: Logs qso with no dupe checking or exchange validation (be
  careful). The qso may not be scored correctly.
- *\*: Log qso and send Quick QSL message.
- *<Alt>-D*: Dupe check on 2nd radio.
- *<Alt>-M*: Switch mult display mode.
- *<Alt>-R*: Switch radios.
- *<Alt>-S*: Set CW speed. Followed by two numeric digits.
- *<Ctrl>-F*: Search log for callsign fragment. <Escape> clears search results.
- *<Ctrl>-N*: Make a note.
- *<Ctrl>-Z* (in call/exchange entry field): Undo.
- *<PgDn>* : Decrease CW speed.
- *<PgUp>*: Increase CW speed.
- *<Ctrl>-<PgDn>*: Decrease CW speed on inactive radio.
- *<Ctrl>-<PgUp>* : Increase CW speed on inactive radio.
- *<Up>/<Down> arrow*: Switch between call and exchange windows.
- *<Ctrl>-<Up>*: In S&P mode, tune to next higher detected signal on bandmap.
  In CQ mode tune to the next higher signal on the INACTIVE radio.
- *<Ctrl>-<Down>*: In S&P mode, tune to next lower detected signal on bandmap.
  In CQ mode tune to the next lower signal on the INACTIVE radio.
- *<Tab>*: Enter S&P mode.
- *-* (hyphen): Mark frequency on active radio as a dupe, or clear the current mark.
- *=*: Mark frequency on inactive radio as a dupe, or clear the current mark.

Program control
~~~~~~~~~~~~~~~

User Interface control.

- *<Alt>-F*: Open the File menu.
- *<Alt>-C*: Open the Config menu.
- *<Alt>-W*: Open the Windows menu.
- *<Alt>-H*: Open the Help menu.
- *<Escape>*: Dismiss menus and dialogs.

Radio control
~~~~~~~~~~~~~

Basic radio control from SO2SDR.

- *Radio QSY*: Enter a number corresponding to a frequency in kHz in the
  callsign window (decimal places to the Hz are allowed as of +1.2.2git+.  e.g.
28523.450). If the number is followed by a semicolon (like 14005;), the
frequency change will apply to the inactive radio.
- *Radio change mode*: Enter a mode string, +CW+, +CWR+, +LSB+, +USB+, +FM+, or
  +AM+ optionally followed by two to five digits to set the radio's
passbandwidth.  Similar to setting the frequency, a trailing +;+ will set the
mode on the inactive radio.  e.g. Set mode on active radio, +USB+.  Set mode on
inactive radio, +CWR;+.  Set mode and passband width on active radio,
+LSB2400+.  Set mode and passband width on inactive radio, +USB2700;+.  Not all
Hamlib rig backends support setting a specifc bandwidth.  All backends should
support setting the mode without a specific passband width.  If not, file a bug
against Hamlib.  - N0NB

<<<
CW Messages
-----------

The function keys, F1-F12, are used to send CW messages via the attached keyer
that supports the K1EL protocol (Winkeyer, Master Keyer 1, etc.) and certain
SO2R control functions.  Message assigments can be changed in the CW Messages
dialog, see <<X2,CW Message macros>>.

[NOTE]
F key assignments will change depending on whether CQ or S&P modes are
in effect and whether the cursor is in the call or exchange fields.  This
sounds more complicated that it really is as the program will do the "right
thing" when you want it.  Assignments may also change slightly from contest to
contest and whether the associated config is setup for domestic (US/VE) or DX
sides of an event.

CQ Functions
~~~~~~~~~~~~

Unless noted, messages will be sent on the active radio.

- *F1*: Normal CQ message on (also by <Enter> in empty Call field).
- *F2*: Short CQ message on.
- *F3*: My callsign.
- *F4*: Unassigned.
- *F5*: Unassigned.
- *F6*: Unassigned.
- *F7*: Short CQ message on inactive radio.
- *F8*: Normal CQ message on inactive radio.
- *F9*: ? (query).
- *F10*: Swap frequencies between radios.
- *F11*: Best CQ (QSY current radio to "best" CQ freq).
- *F12*: Toggle parallel port pin for audio control.

Exchange Functions
~~~~~~~~~~~~~~~~~~

Messages sent only when cursor is in the Exchange field.

[NOTE]
Exchange length will vary by event.  F3-F6 are assigned elements of the
exchange by default ranging from the section to all elements of a November
Sweepstakes exchange.

- *F1*: Callsign.
- *F2*: Complete sent exchange.
- *F3*: Sent exchange part 1.
- *F4*: Sent exchange part 2.
- *F5*: Sent exchange part 3.
- *F6*: Sent exchange part 4.
- *F7*: Short CQ message on inactive radio.
- *F8*: Normal CQ message on inactive radio.
- *F9*: ? (query).
- *F10*: Swap frequencies between radios.
- *F11*: Best CQ (QSY current radio to "best" CQ freq).
- *F12*: Toggle parallel port pin for audio control.

Control Functions
~~~~~~~~~~~~~~~~~

Unassigned by default.  Most desktop environments in Linux will assign
<Ctl>-F? keys to switch desktop workspaces.  To use messages you assign
to these keys check the Grab Keyboard option in the Windows menu
(<Alt>-W).

Shift Functions
~~~~~~~~~~~~~~~

Messages sent whether the cursor is in the Call or Exchange fields.

- *F1*: CALL?
- *F2*: AGN?
- *F3*: SECT?
- *F4*: Unassigned
- *F5*: Unassigned
- *F6*: Unassigned
- *F7*: Unassigned
- *F8*: Unassigned
- *F9*: Unassigned
- *F10*: Unassigned
- *F11*: Unassigned
- *F12*: Unassigned

[[X2]]
CW Message macros
~~~~~~~~~~~~~~~~~

These macros can be assigned to F keys.  The macro assignments may be modified
in the 'CW Messages' dialog after a contest has been selected.

- *\{CALL\}*: Callsign.
- *\{#\}*: QSO number.
- *\{UP\}*: Increase speed by 5 WPM.
- *\{DN\}*: Decrease speed by 5 WPM.
- *\{CANCEL\}*: Cancel any previous speed change.
- *\{R2\}*: Send on other radio.
- *\{R2CQ\}*: Send on other radio, marked as CQ. If a call is entered, program
  will switch to other radio to answer CQ. <Escape> or a F1 CQ will clear this
state.
- *\{STATE\}*: State.
- *\{SECTION\}*: ARRL section.
- *\{NAME\}*: Name.
- *\{CQZ\}*: CQ zone.
- *\{ITUZ\}*: ITU zone.
- *\{GRID\}*: Grid.
- *\{CALL_ENTERED\}*: Contents of call entry window.
- *\{TOGGLESTEREOPIN\}*: Toggle parallel port pin for audio control. This macro
  should be used alone and will not work with other CW macros.
- *\{CQMODE\}*: Switch to CQ mode.
- *\{SPMODE\}*: Switch to SP mode.
- *\{SWAP_RADIOS\}*: Swap frequencies between radios.
- *\{REPEAT_LAST\}*: Repeats previously sent message.
- *\{REPEAT_NR\}*: If the call entry line is not empty, send current QSO #. If
  call entry line is empty, sends number sent for last logged QSO.
- *\{CLEAR_RIT\}*: Clear the RIT.
- *\{RIG_FREQ\}*: Send frequency of radio rounded to nearest kHz.
- *\{RIG2_FREQ\}*: Send frequency of 2^nd^ radio rounded to nearest kHz.
- *\{BEST_CQ\}*: QSY current radio to "best" CQ freq.
- *\{BEST_CQ_R2\}*: QSY 2^nd^ radio to "best" CQ freq.
- *|*: Insert 1/2 dit extra space (CT space).

<<<
:numbered!:
[[X1]]
[appendix]
Simple udev rules
-----------------

'The following is entirely optional for users of SO2SDR on a Linux distribution
with mutliple USB to RS-232 devices (including those built into various amateur
radio devices such as Winkeyer, Master Keyer, microHAM, etc.).  This section
assumes familiarity with the +sudo+ command or another method of obtaining
superuser permissions and working at the command line in a terminal session
(xterm, Gnome Terminal, Konsole, XFCE Terminal, etc.).'

Controlling which port a USB device will appear as is a hopeless game as the
system will occasionally swap the device names the physical names are assigned
which means the radio no longer responds and the keyer mysteriously isn't
sending CW (don't ask how I know!).  The same system responsible for naming the
devices in the first place can be configured to always assign names that are
meaningful to us by way of symbolic links.  On most Linux systems superuser
(or root, a.k.a. system administrator) access is required to modify the 'udev'
configuration file.

The first step is to learn some things about the USB devices attached to the
system.  With many USB devices it may well be easier to have the USB to serial
adpapter, Winkeyer, Master Keyer, etc. connected one at a time.

From a terminal session enter the following command:

 $ lsusb

Several lines of output will be generated depending on the USB hardware
connected to the system.  Shown are just lines of interest.

This is the output from an IO Gear USB to RS-232 adapter using the popular
Prolific chipset:

 Bus 006 Device 003: ID 0557:2008 ATEN International Co., Ltd UC-232A Serial Port [pl2303]

This is the output from a
http://www.hamgadgets.com/index.php?main_page=product_info&cPath=31&products_id=106['Ham
Gadgets Master Keyer 1'] which uses the popular FTDI chipset (the MK1 offers
http://www.k1el.com/['Winkeyer'] emulation):

 Bus 008 Device 006: ID 0403:6001 Future Technology Devices International, Ltd FT232 USB-Serial (UART) IC

In these two lines of output the data we need to configure is the ID field
which consists of the colon separated digits.  These are broken down as the
Vendor ID and Product ID, respectively.  For the MK1 the Vendor ID is +0403+
and the Product ID is +6001+.  These ID numbers will be used to construct
the udev rules.

As the superuser, create a local udev file.  On Debian and related systems
(Ubuntu in its flavors, Mint, Mepis, etc.) this file will be placed in
+/etc/udev/rules.d/+ (examples from other distributions are welcome).  The
files in this directory will be read by udev in alphabetical order.  The Debian
distribution gives each file a leading pair of digits which dictate the order
they are read by udev.  As udev only considers a rule the first time it is
read, it's wise to ensure that our custom rule is read before any other rules
that may affect these devices.  A name like +00-local-usb-serial.rules+ is a
good choice:

 $ sudo vim /etc/udev/rules.d/00-local-usb-serial.rules

An example udev rules file:

 # local rules file for USB to serial converters
 SUBSYSTEM=="tty", ATTRS{idVendor}=="0557", ATTRS{idProduct}=="2008", SYMLINK+="iogear"
 SUBSYSTEM=="tty", ATTRS{idVendor}=="0557", ATTRS{idProduct}=="2008", SYMLINK+="rig"
 SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", SYMLINK+="mk1"

The syntax should be rather self explanatory.  Replace the values of +idVendor+ and 
+idProduct+ with those of your specific devices Vendor ID and Product ID values.  The
+SYMLINK+ value should be a name that is meaningful to you.  As you can see there are
two symbolic links created for the IO Gear USB to RS-232 adapter.

When either or both of these devices are plugged into the system the symbolic links will
always point to the correct device.  Nice!

[NOTE]
If there are two devices with the same Vendor ID and Product ID values plugged
in then the above example will fail to differentiate between the devices.  Some
online information pointed to some devices having unique serial numbers for
identifying separate devices, but neither my IO Gear nor MK1 have +iSerial+ set
to a value other than +0+ (the iSerial value is shown with the +lsusb -v+
command).  It is also possible to identify devices by the +Bus+ and +Device+
values shown by +lsusb+ above, but if the devices are moved to another USB port
the rule will fail.

It's now necessary to restart udev for it to read the new rules (Debian and
related distributions):

 $ sudo invoke-rc.d udev restart

In some cases it may be necessary to simply shutdown and restart the system.

If all went well, you should now see the symbolic links created by the custom udev
rules when the USB to RS-232 devices are plugged in:

 $ ls -l /dev/rig
 lrwxrwxrwx 1 root root 7 May 24 20:28 /dev/rig -> ttyUSB0
 $ ls -l /dev/iogear
 lrwxrwxrwx 1 root root 7 May 24 20:28 /dev/iogear -> ttyUSB0
 $ ls -l /dev/mk1
 lrwxrwxrwx 1 root root 7 May 24 20:28 /dev/mk1 -> ttyUSB1

It just so happens the devices were assigned their +ttyUSB+'x' names in the
order that are preferred, but occasionally they are swapped.  The rules give
the consistent names needed so there is no need to reconfigure the various
programs after each system restart.

<<<
[appendix]
SO2SDR License
--------------

SO2SDR--Amateur radio contest logging application.

Copyright (C) 2010-2012 R. Torsten Clay, N4OGW, <so2sdr@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the 'GNU General Public License' as published by
the 'Free Software Foundation', either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

// vim: set syntax=asciidoc:


